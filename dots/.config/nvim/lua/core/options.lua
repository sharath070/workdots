vim.g.mapleader = " "
vim.g.maplocalleader = " "

vim.g.have_nerd_font = true

-- see `:help vim.opt`
--  for more options, you can see `:help option-list`
local set = vim.opt

set.expandtab = true
set.autoindent = true
set.tabstop = 2
set.shiftwidth = 2

set.number = true
set.relativenumber = true
set.virtualedit = "block"
set.termguicolors = true

-- enable mouse mode, can be useful for resizing splits for example!
set.mouse = "a"

-- don't show the mode, since it's already in the status line
set.showmode = false

-- schedules the clipboard setting to happen later — after neovim finishes starting up
-- the function inside vim.schedule() runs after neovim has finished loading all plugins, ui events, etc.
vim.schedule(function()
	set.clipboard = "unnamedplus"
end)

-- enable break indent
set.breakindent = true

-- save undo history
set.undofile = true

-- case-insensitive searching unless \c or one or more capital letters in the search term
set.ignorecase = true
set.smartcase = true

-- symbols that appear before line nums (the git symbols)
set.signcolumn = "yes"

-- decrease update time
set.updatetime = 250

-- decrease mapped sequence wait time
set.timeoutlen = 400

-- configure how new splits should be opened
set.splitright = true
set.splitbelow = true

-- preview substitutions live, as you type!
set.inccommand = "split"

-- show which line your cursor is on
set.cursorline = true

-- minimal number of screen lines to keep above and below the cursor.
set.scrolloff = 10

-- if performing an operation that would fail due to unsaved changes in the buffer (like `:q`),
-- instead raise a dialog asking if you wish to save the current file(s)
set.confirm = true

vim.api.nvim_create_autocmd("textyankpost", {
	desc = "highlight when yanking (copying) text",
	group = vim.api.nvim_create_augroup("kickstart-highlight-yank", { clear = true }),
	callback = function()
		vim.highlight.on_yank()
	end,
})

vim.diagnostic.config({
	virtual_text = {
		prefix = " ●", -- Could be "●", "■", "▎", or even an emoji
		spacing = 4,
	},
	signs = true,
	underline = true,
	float = {
		border = "rounded",
	},
	update_in_insert = true,
})

local signs = {
	Error = " ",
	Warn = " ",
	Hint = " ",
	Info = " ",
}

for type, icon in pairs(signs) do
	local hl = "DiagnosticSign" .. type
	vim.fn.sign_define(hl, { text = icon, texthl = hl, numhl = hl })
end

-- Set default LSP floating window border style
local orig_util_open_floating_preview = vim.lsp.util.open_floating_preview
function vim.lsp.util.open_floating_preview(contents, syntax, opts, ...)
	opts = opts or {}
	opts.border = "rounded"
	return orig_util_open_floating_preview(contents, syntax, opts, ...)
end

vim.api.nvim_create_autocmd("BufReadPost", {
	callback = function()
		local lines = vim.api.nvim_buf_get_lines(0, 0, 10, false)
		for _, line in ipairs(lines) do
			local lower = line:lower()
			if lower:match("generated") and lower:match("do not edit") then
				vim.schedule(function()
					vim.notify("⚠️ AUTOGENERATED FILE DETECTED.⚠️", vim.log.levels.WARN, {
						title = "Generated File Warning",
					})
					vim.notify("This is a generated file. Changes may be lost.", vim.log.levels.WARN, {
						title = "Generated File Warning",
					})
				end)
				break
			end
		end
	end,
})
